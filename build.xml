<project name="DMAssist" basedir="." default="all">

	<property name="src.engine.dir"  value="src/engine/src"/>
	<property name="src.swing.dir"  value="src/swing"/>
	<property name="src.c.dir"     value="csrc"/>
	<property name="src.resources.dir"     value="resources"/>
	<property name="src.android.dir"  value="src/android/src"/>

	<property name="dir.android" value="src/android"/>
	
	<property name="build.dir"   value="build"/>
	<property name="classes.engine.dir" value="${build.dir}/classes/engine"/>
	<property name="classes.swing.dir" value="${build.dir}/classes/swing"/>
	<property name="build.resources.dir" value="${build.dir}/resources"/>
	<property name="build.docs.dir" value="${build.dir}/javadocs"/>
	<property name="build.lib.dir" value="${build.dir}/lib"/>
	<property name="build.lib.android.dir" value="${build.dir}/android-lib"/>
	<property name="build.android.dir" value="${build.dir}/android"/>
	<property name="jar.dir"     value="${build.dir}/jar"/>
	<property name="obj.dir"     value="${build.dir}/obj"/>
	<property name="lib.dir"     value="3rdparty"/>
	<property name="report.dir"  value="${build.dir}/testreport"/>

	<property name="main-class"  value="com.ziroby.dmassist.swing.Main"/>

	<property file="src/android/local.properties" />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>
	<path id="classpath-swing">
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
		<dirset dir="${classes.engine.dir}"/>
	</path>
	<path id="classpath-android">
		<fileset dir="${sdk.dir}/platforms/android-3" includes="**/*.jar" />
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
		<dirset dir="${classes.engine.dir}"/>
	</path>

	<path id="application" location="${jar.dir}/${ant.project.name}.jar"/>

	<target name="setup">
		<mkdir dir="${classes.engine.dir}"/>
		<mkdir dir="${classes.swing.dir}"/>
		<mkdir dir="${build.resources.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<mkdir dir="${obj.dir}"/>
		<mkdir dir="${report.dir}"/>
		<mkdir dir="${build.android.dir}"/>
	</target>

	<target name="clean" description="--> Deletes all generated file">
		<delete dir="${build.dir}"/>
		<ant dir="${dir.android}" target="clean"/>
	</target>

	<target name="compile-java" depends="compile-engine,compile-swing,compile-android">
	</target>

	<target name="compile-engine" depends="setup">
		<javac srcdir="${src.engine.dir}" 
               destdir="${classes.engine.dir}"  classpathref="classpath"/>
		<copy todir="${classes.engine.dir}">
			<fileset dir="${src.engine.dir}" excludes="**/*.java"/>
		</copy>
		<jar destfile="${build.lib.android.dir}/${ant.project.name}-engine.jar">
			<fileset dir="${classes.engine.dir}" />
			<fileset dir="${src.engine.dir}" excludes="**/*.xml" />
		</jar>

	</target>

	<target name="compile-swing" depends="setup,compile-engine">
		<javac srcdir="${src.swing.dir}" destdir="${classes.swing.dir}"
               classpathref="classpath-swing"/>
		<copy todir="${classes.swing.dir}">
			<fileset dir="${src.swing.dir}" excludes="**/*.java"/>
		</copy>
	</target>

	<target name="compile-android" depends="setup,compile-engine">
		<ant dir="${dir.android}" target="debug"/>
	</target>
	
	<!-- ================================= 
          target: package              
         ================================= -->
	<target name="package" depends="jar,zip" description="--> Creates final packages">
	</target>


	<target name="jar" depends="compile-java,resources">
		<jar destfile="${jar.dir}/${ant.project.name}.jar">
			<fileset dir="${classes.engine.dir}"/>
			<fileset dir="${classes.swing.dir}"/>
			<fileset dir="${src.engine.dir}" />
			<fileset dir="${src.swing.dir}" />
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
				<attribute name="SplashScreen-Image" value="resources/splash.png" />
				<attribute name="Class-Path" value="jyaml-1.3.jar" />
			</manifest>
		</jar>
	</target>

	<!-- ================================= 
          target: resources              
         ================================= -->
	<target name="resources" depends="" description="--> Copies resources into place">
		<!-- <copy todir="${classes.dir}">
            <fileset dir="${src.java.dir}">
                <exclude name="**/*.java"/>
       	    </fileset>
        </copy> -->
		<copy todir="${build.resources.dir}">
			<fileset dir="${src.resources.dir}">
			</fileset>
		</copy>
	</target>

	<target name="zip" depends="jar">
		<zip destfile="${build.dir}/${ant.project.name}.zip">
			<fileset file="3rdparty/jyaml-1.3.jar"/>
			<path refid="application"/>
			<zipfileset file="${src.resources.dir}/dmassist" filemode="755"/>
			<zipfileset file="${src.resources.dir}/dmassist.bat" filemode="755"/>
			<zipfileset dir="${src.resources.dir}" includes="*.txt,*.html" 
        			    prefix="resources" />
		</zip>
	</target>


	<target name="run" depends="build,test" description="--> Runs the app">
		<java fork="true" classname="${main-class}">
			<classpath>
				<path refid="classpath"/>
				<path refid="application"/>
			</classpath>
			<jvmarg value="-Djava.library.path=build"/>
		</java>
	</target>

	<target name="test" depends="junit" description="--> Runs all tests"/>

	<target name="junit" depends="package,junit-engine">
	</target>

	<target name="junit-engine" depends="package">
		<junit printsummary="yes" haltonerror="true">
			<classpath>
				<path refid="classpath"/>
				<dirset dir="${classes.engine.dir}"/>
			</classpath>

			<formatter type="xml"/>

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${src.engine.dir}" includes="**/*Test.java"/>
			</batchtest>
		</junit>
	</target>

	<!--	<target name="junit-swing" depends="package">
		<junit printsummary="yes" haltonerror="true">
			<classpath>
				<path refid="classpath"/>
				<path refid="application"/>
			</classpath>

			<formatter type="xml"/>

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${src.swing.dir}" includes="**/*Test.java"/>
			</batchtest>
		</junit>
	</target> -->

	<target name="testreport" depends="junitreport" 
            description="--> Runs tests &amp; creates an HTML report"/>

	<target name="junitreport" depends="junit">
		<junitreport>
			<fileset dir="${report.dir}" includes="TEST-*.xml"/>
			<report todir="${report.dir}"/>
		</junitreport>
	</target>

	<target name="build" depends="package,junit" 
            description="--> Builds everything"/>

	<target name="rebuild" depends="clean,build"
            description="--> Cleans &amp; builds"/>

	<target name="javadoc" description="--> Create documentation">
		<javadoc
	           destdir="${build.docs.dir}"
	           author="true"
	           version="true"
	           use="true"
	 		   classpathref="classpath-android"
	           windowtitle="DM Assist API">

			<packageset dir="${src.engine.dir}" defaultexcludes="yes">
				<include name="com/ziroby/**"/>
				<exclude name="**/*Test.java"/>
				<exclude name="**/*Tests.java"/>
			</packageset>

			<packageset dir="${src.swing.dir}" defaultexcludes="yes">
				<include name="com/ziroby/**"/>
				<exclude name="**/*Test.java"/>
				<exclude name="**/*Tests.java"/>
			</packageset>

			<packageset dir="${src.android.dir}" defaultexcludes="yes">
				<include name="com/ziroby/**"/>
				<exclude name="**/*Test.java"/>
				<exclude name="**/*Tests.java"/>
			</packageset>

			<doctitle>
				<![CDATA[<h1>DM Assist</h1>]]></doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2009-2011 Ron Romero. All Rights Reserved.</i>]]></bottom>
	<tag name="todo" scope="all" description="To do:"/>
	<!--	    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
	    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
	    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
	    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
-->
</javadoc>
</target>

<!-- ================================= 
          target: javah              
         ================================= -->
<target name="javah" depends="package" description="--> Creates header files for JNI methods">
<javah class="com.ziroby.jamis.Npc" destdir="${src.c.dir}/jni" 
			classpath="${jar.dir}/${ant.project.name}.jar" verbose="no"/>
</target>


<!-- ================================= 
          target: all              
         ================================= -->
<target name="all" depends="build,testreport,javadoc" description="--> Does it all"/>

</project>
