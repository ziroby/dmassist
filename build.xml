<project name="DMAssist" basedir="." default="all">

    <taskdef resource="cpptasks.tasks"/>

    <property name="src.java.dir"  value="src"/>
    <property name="src.c.dir"     value="csrc"/>
    <property name="src.resources.dir"     value="resources"/>

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="build.resources.dir" value="${classes.dir}/resources"/>
    <property name="build.docs.dir" value="${build.dir}/javadocs"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
    <property name="obj.dir"     value="${build.dir}/obj"/>
    <property name="lib.dir"     value="3rdparty"/>
    <property name="report.dir"  value="${build.dir}/testreport"/>

    <property name="main-class"  value="com.ziroby.dmassist.ui.Main"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
	
    <taskdef resource="cpptasks.tasks"/>

    <target name="setup">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${build.resources.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <mkdir dir="${obj.dir}"/>
        <mkdir dir="${report.dir}"/>
    </target>
	
    <target name="clean" description="--> Deletes all generated file">
        <delete dir="${build.dir}"/>
    </target>
    
    <target name="compile-c" depends="setup">
        <cc outtype="shared" subsystem="console" outfile="${build.dir}/DMAssistJNI" objdir="${obj.dir}">
            <fileset dir="${src.c.dir}" includes="**/*.c"/>
            <includepath>
                <dirset dir="${src.c.dir}/dnd/include" />
                <dirset dir="${src.c.dir}/dnd/npc" />
                <dirset dir="${src.c.dir}/utils" />
            </includepath>
        </cc>        
    </target>

    <target name="compile-java" depends="setup">
        <javac srcdir="${src.java.dir}" destdir="${classes.dir}"  classpathref="classpath"/>
        <copy todir="${classes.dir}">
            <fileset dir="${src.java.dir}" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="package" depends="compile-java,compile-c,resources">
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
                <attribute name="SplashScreen-Image" value="resources/splash.png"/>
            </manifest>
        </jar>
    </target>
    
    <!-- ================================= 
          target: resources              
         ================================= -->
    <target name="resources" depends="" description="--> Copies resources into place">
        <copy todir="${classes.dir}">
            <fileset dir="${src.java.dir}">
                <exclude name="**/*.java"/>
       	    </fileset>
        </copy>
        <copy todir="${build.resources.dir}">
            <fileset dir="${src.resources.dir}">
       	    </fileset>
        </copy>
    </target>

    <target name="run" depends="build" description="--> Runs the app">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>
            </classpath>
        	<jvmarg value="-Djava.library.path=build"/>
        </java>
    </target>

    <target name="test" depends="junit" description="--> Runs all tests"/>

    <target name="junit" depends="package">
         <junit printsummary="yes">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
            
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${src.java.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>
    
    <target name="testreport" depends="junitreport" description="--> Runs tests &amp; creates an HTML report"/>

    <target name="junitreport" depends="junit">
        <junitreport>
            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
            <report todir="${report.dir}"/>
        </junitreport>
    </target>

    <target name="build" depends="package,junit" description="--> Builds everything"/>

    <target name="rebuild" depends="clean,build" description="--> Cleans &amp; builds"/>

	<target name="javadoc" description="--> Create documentation">
	 <javadoc
	           destdir="${build.docs.dir}"
	           author="true"
	           version="true"
	           use="true"
	 		   classpathref="classpath"
	           windowtitle="DM Assist API">

	 	
	 	
	    <packageset dir="${src.java.dir}" defaultexcludes="yes">
	    	<include name="com/ziroby/**"/>
		    <exclude name="**/*Test.java"/>
		    <exclude name="**/*Tests.java"/>
	    </packageset>

	    <doctitle><![CDATA[<h1>DM Assist</h1>]]></doctitle>
	    <bottom><![CDATA[<i>Copyright &#169; 2009 Ron Romero. All Rights Reserved.</i>]]></bottom>
	    <tag name="todo" scope="all" description="To do:"/>
<!--	    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
	    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
	    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
	    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
-->
	 </javadoc>	
		</target>

	<!-- ================================= 
          target: javah              
         ================================= -->
    <target name="javah" depends="package" description="--> Creates header files for JNI methods">
		<javah class="com.ziroby.jamis.Npc" destdir="${src.c.dir}/jni" 
			classpath="${jar.dir}/${ant.project.name}.jar" verbose="no"/>        
    </target>

	
	<!-- ================================= 
          target: all              
         ================================= -->
    <target name="all" depends="build,testreport,javadoc" description="--> Does it all"/>
	
</project>
